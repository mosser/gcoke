/**
 * This file is part of gCoKe [ http://www.gcoke.org ]
 *
 * Copyright (C) 2010-  Sebastien Mosser
 *
 * gCoKe is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as 
 * published by the Free Software Foundation; either version 2 of 
 * the License, or (at your option) any later version.
 *
 * gCoKe is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public 
 * License along with gCoKe; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * @author   Main    Sebastien Mosser  [ sm@gcoke.org ]
 **/
 
group gck2pl; // Transform gcoke abstract syntax into prolog
 
// Global source template (root)
source(artefacts) ::= <<
%%%%
%% gckc output (gck2pl template: .gck -> .pl)
%%%%

:- discontiguous build_compiled_graph/3.
:- discontiguous build_compiled_composition/2.

<artefacts; separator="\n\n">

%% End of generated code
>>

// handling raw loading (should be prolog-specific by the way)
raw(file_name) 		::= ":- load_pops(<file_name>)."

// halding sniffs
sniff(line_name) 	::= ":- gcoke_sniff(<line_name>)."

// Handling required files
require(file_name, artefacts) ::= <<

%% Required content (from <file_name>)

<artefacts; separator="\n\n">

%% End of required content (from <file_name>)
>>

// handling graphs
graph(id, nodes, edges, props) ::= <<
%% Graph <id> (Builder)
build_compiled_graph(<id>, Graph, Counter) :-
  graph:build_graph(<id>, Empty),
  Props_Acts = [<props>],
  Nodes_Acts = [<nodes>],
  Edges_Acts = [<edges>],
  flatten([Props_Acts, Nodes_Acts, Edges_Acts], Actions),
  engine:do_sequence(Empty, Actions, Graph, Counter),!.
:- errors:catch_and_ignore((build_compiled_graph(<id>, G, _), graph:push_into_db(G))).
>>

// handling graph properties
graph_prop_lst(props) 	::= "<props; separator=\",\n                \">"
graph_prop_set(key, values) ::= 
	"actions:add_property(<key>,[<values; separator=\",\">])"

//handling node
node_lst(nodes) 	::= "<nodes; separator=\",\n                \">"
node(id, props) 	::= "actions:add_node(<id>, [<props>])"

// handling edges
edge_lst(edges) 	::= "<edges; separator=\",\n                \">"
edge(left, right, props) ::= 
	"actions:add_edge(<left>, <right>, [<props>])"

// handling properties for nodes and edges
prop_lst(props) 	::= "<props; separator=\", \">"
prop_set(key, values) 	::= "[<key>, [<values; separator=\",\">]]"

// handling compositions
composition(name, inputs, outputs, directives) ::= <<
%% Composition <name> (Builder)
build_compiled_composition(<name>, Composition) :- 
  composition:build_pool(<name>, 
                         [<inputs>], 
                         [<outputs>], 
                         Empty),
  Directives = <directives>,
  composition:push_directive_set(Empty, Directives, Composition),!.
:- errors:catch_and_ignore((build_compiled_composition(<name>, C), 
                            composition:push_into_db(C))).
>>

graph_lst(graphs) 	::= "<graphs; separator=\", \">"

compo_dir_lst(directives) ::= "[<directives; separator=\",\n                \">]"
compo_dir(algo, inputs, outputs) ::= <<
dir(<algo>, 
                    [<inputs; separator=", ">], 
                    [<outputs; separator=", ">])
>>

algo_bind(param, value) ::= "[<param>, <value>]"
algo_graph(graph) 	::= "graph(<graph>)"
algo_term(term) 	::= "term(<term>)"
algo_graph_set(set) 	::= "graph_set([<set; separator=\", \">])"

// halding composition triggering
trigger(composition_name) ::= <<
%% Triggering composition <composition_name>
:- errors:catch_and_ignore((build_compiled_composition(<composition_name>, C), 
                            composition:play(C))).
>>


